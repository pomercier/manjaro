name: iso_build
on:
  workflow_dispatch:
  # schedule:
  #  - cron:  '30 2 * * *'

permissions:
  contents: write
  actions: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.time.outputs.time }}
      kernel_version: ${{ steps.versions.outputs.kernel }}
    steps:
      - 
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - 
        id: time
        uses: nanzm/get-time-action@v2.0
        with:
          format: 'YYYYMMDDHHmm'
      -
        name: Get latest versions
        id: versions
        run: |
          # Use fixed stable kernel version
          LATEST_KERNEL="linux66"
          echo "kernel=${LATEST_KERNEL}" >> $GITHUB_OUTPUT
          echo "Latest kernel: ${LATEST_KERNEL}"
      
  build-release:
    runs-on: ubuntu-latest
    needs: [prepare-release]
    strategy:
      matrix:
        EDITION: [kde]
        BRANCH: [stable]
        SCOPE: [full]
    steps:
      - 
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Checkout
        uses: actions/checkout@v4
      - 
        id: time
        uses: nanzm/get-time-action@v2.0
        with:
          format: 'YY.MM'
      -
        name: Create package install script
        run: |
          cat > install_packages.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Starting package installation ==="
          
          # Wait for pacman lock to be released
          while fuser /var/lib/pacman/db.lck >/dev/null 2>&1; do
            echo "Waiting for pacman lock..."
            sleep 2
          done
          
          # Update package database
          pacman -Sy --noconfirm
          
          # Essential packages first
          ESSENTIAL_PACKAGES=(
            "base-devel"
            "git"
            "curl"
            "wget"
            "nano"
            "htop"
            "neofetch"
            "networkmanager"
            "sudo"
          )
          
          echo "Installing essential packages..."
          for pkg in "${ESSENTIAL_PACKAGES[@]}"; do
            echo "Installing $pkg..."
            pacman -S --noconfirm --needed "$pkg" || echo "Warning: Failed to install $pkg"
          done
          
          # KDE and applications
          KDE_PACKAGES=(
            "plasma-desktop"
            "plasma-workspace"
            "kate"
            "dolphin"
            "gwenview"
            "ark"
            "spectacle"
            "konsole"
            "systemsettings"
            "kinfocenter"
          )
          
          echo "Installing KDE packages..."
          for pkg in "${KDE_PACKAGES[@]}"; do
            echo "Installing $pkg..."
            pacman -S --noconfirm --needed "$pkg" || echo "Warning: Failed to install $pkg"
          done
          
          # Applications
          APP_PACKAGES=(
            "firefox"
            "libreoffice-fresh"
            "gimp"
            "vlc"
            "gparted"
          )
          
          echo "Installing application packages..."
          for pkg in "${APP_PACKAGES[@]}"; do
            echo "Installing $pkg..."
            pacman -S --noconfirm --needed "$pkg" || echo "Warning: Failed to install $pkg"
          done
          
          # NVIDIA drivers (optional)
          NVIDIA_PACKAGES=(
            "nvidia-dkms"
            "nvidia-utils"
            "nvidia-settings"
            "lib32-nvidia-utils"
          )
          
          echo "Installing NVIDIA packages..."
          for pkg in "${NVIDIA_PACKAGES[@]}"; do
            echo "Installing $pkg..."
            pacman -S --noconfirm --needed "$pkg" || echo "Warning: Failed to install $pkg"
          done
          
          # Install yay for AUR packages
          echo "Installing yay..."
          if ! command -v yay &> /dev/null; then
            cd /tmp
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --noconfirm --needed
            cd /
            rm -rf /tmp/yay
          fi
          
          # AUR packages (minimal set)
          AUR_PACKAGES=(
            "brave-bin"
            "visual-studio-code-bin"
          )
          
          echo "Installing AUR packages..."
          for pkg in "${AUR_PACKAGES[@]}"; do
            echo "Installing $pkg from AUR..."
            yay -S --noconfirm --needed "$pkg" || echo "Warning: Failed to install $pkg from AUR"
          done
          
          echo "=== Package installation completed ==="
          EOF
          chmod +x install_packages.sh
      -
        name: Create system configuration script
        run: |
          cat > configure_system.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Starting system configuration ==="
          
          # Enable essential services
          systemctl enable NetworkManager
          systemctl enable sddm
          
          # Create default user if not exists
          if ! id "manjaro" &>/dev/null; then
            useradd -m -G wheel -s /bin/bash manjaro
            echo "manjaro:manjaro" | chpasswd
          fi
          
          # Configure sudo
          echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers
          
          # Set timezone
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime
          
          # Generate locales
          echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
          echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen
          locale-gen
          
          # Set locale
          echo "LANG=en_US.UTF-8" > /etc/locale.conf
          
          # Configure hostname
          echo "manjaro-custom" > /etc/hostname
          
          # Configure hosts
          cat > /etc/hosts << 'HOSTS'
          127.0.0.1   localhost
          ::1         localhost
          127.0.1.1   manjaro-custom.localdomain manjaro-custom
          HOSTS
          
          # Configure mkinitcpio
          sed -i 's/^HOOKS=.*/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/' /etc/mkinitcpio.conf
          
          # Generate initramfs
          mkinitcpio -P
          
          echo "=== System configuration completed ==="
          EOF
          chmod +x configure_system.sh
      -
        name: Create cleanup script
        run: |
          cat > cleanup_iso.sh << 'EOF'
          #!/bin/bash
          echo "=== Starting ISO cleanup ==="
          
          # Clean package cache
          pacman -Sc --noconfirm
          yay -Sc --noconfirm 2>/dev/null || true
          
          # Clean temporary files
          rm -rf /tmp/*
          rm -rf /var/tmp/*
          rm -rf /var/cache/pacman/pkg/*
          
          # Clean logs
          find /var/log -type f -name "*.log" -delete 2>/dev/null || true
          journalctl --vacuum-time=1d 2>/dev/null || true
          
          # Clean user caches
          find /home -name ".cache" -type d -exec rm -rf {} + 2>/dev/null || true
          find /root -name ".cache" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Clean bash history
          rm -f /root/.bash_history
          find /home -name ".bash_history" -delete 2>/dev/null || true
          
          # Update system databases
          ldconfig
          updatedb 2>/dev/null || true
          
          echo "=== ISO cleanup completed ==="
          EOF
          chmod +x cleanup_iso.sh
      -
        name: Validate build environment
        run: |
          echo "=== Build Environment Information ==="
          echo "Kernel version: ${{ needs.prepare-release.outputs.kernel_version }}"
          echo "Release tag: ${{ needs.prepare-release.outputs.release_tag }}"
          echo "Current time: $(date)"
          echo "Available disk space: $(df -h /)"
          echo "Available memory: $(free -h)"
          echo "====================================="
      -
        name: image-build-upload
        uses: manjaro/manjaro-iso-action@main
        with:
          edition: ${{ matrix.edition }}
          branch: ${{ matrix.branch }}
          scope: ${{ matrix.scope }}
          version: ${{ steps.time.outputs.time }}
          kernel: ${{ needs.prepare-release.outputs.kernel_version }}
          code-name: "ManjaroCustom"
          release-tag: ${{ needs.prepare-release.outputs.release_tag }}
          # Simplified repository configuration
          custom-repo: |
            [core]
            SigLevel = Required DatabaseOptional
            Server = https://repo.manjaro.org/stable/$arch/$repo
            
            [extra]
            SigLevel = Required DatabaseOptional
            Server = https://repo.manjaro.org/stable/$arch/$repo
            
            [multilib]
            SigLevel = Required DatabaseOptional
            Server = https://repo.manjaro.org/stable/$arch/$repo
          # Essential packages only
          extra-packages: |
            base-devel
            git
            curl
            jq
            networkmanager
            sudo
          # Post-installation scripts
          post-install: |
            echo "Running post-install scripts..."
            chmod +x install_packages.sh configure_system.sh cleanup_iso.sh
            ./install_packages.sh
            ./configure_system.sh
            ./cleanup_iso.sh
          # Remove conflicting packages
          remove-packages: |
            firefox-esr
            thunderbird-esr
            hexchat
            pidgin
            transmission-cli
            xfburn
            parole
            mousepad
            ristretto
            catfish
            menulibre
            mugshot
            lightdm-gtk-greeter-settings
            light-locker-settings
            xfce4-power-manager
            xfce4-screensaver
            xfce4-clipman-plugin
            xfce4-notes-plugin
            xfce4-screenshooter
            xfce4-taskmanager
            xfce4-weather-plugin
            xfce4-whiskermenu-plugin
            xfce4-pulseaudio-plugin
            network-manager-applet
            nm-connection-editor
            blueman
            pavucontrol
            pulseaudio
            alsa-utils
            manjaro-documentation-en
            manjaro-user-guide
      -
        name: Post-build validation
        if: success()
        run: |
          echo "=== Post-build validation ==="
          # Find ISO files
          ISO_FILES=$(find . -name "*.iso" -type f)
          if [ -n "$ISO_FILES" ]; then
            echo "✅ ISO files found:"
            echo "$ISO_FILES"
            for iso in $ISO_FILES; do
              echo "ISO: $iso"
              ls -lah "$iso"
              echo "Size: $(du -h "$iso")"
              
              # Check if ISO is not empty
              if [ -s "$iso" ]; then
                echo "✅ ISO file is valid (not empty)"
              else
                echo "❌ ISO file is empty"
                exit 1
              fi
            done
          else
            echo "❌ No ISO files found"
            echo "Available files:"
            find . -type f -name "*manjaro*" -o -name "*.iso" | head -20
            exit 1
          fi
          echo "Build completed successfully!"
      -
        name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: manjaro-kde-${{ steps.time.outputs.time }}
          path: "*.iso"
          retention-days: 30
      -
        name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.release_tag }}
          name: "Manjaro KDE Custom ${{ needs.prepare-release.outputs.release_tag }}"
          body: |
            ## Manjaro KDE Custom ISO
            
            **Build Date:** ${{ steps.time.outputs.time }}
            **Kernel:** ${{ needs.prepare-release.outputs.kernel_version }}
            **Branch:** ${{ matrix.branch }}
            **Edition:** ${{ matrix.edition }}
            
            ### Included Software:
            - KDE Plasma Desktop
            - Firefox
            - LibreOffice Fresh
            - GIMP
            - VLC Media Player
            - NVIDIA Drivers
            - Brave Browser (AUR)
            - Visual Studio Code (AUR)
            
            ### Default Credentials:
            - Username: `manjaro`
            - Password: `manjaro`
            
            ### Installation:
            1. Write ISO to USB drive using Rufus, Etcher, or dd
            2. Boot from USB
            3. Follow installation wizard
            
            **Note:** This is a custom build. Test in virtual machine first.
          files: "*.iso"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: rollback
        if: ${{ failure() || cancelled() }}
        run: |
          echo "=== Rollback process started ==="
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token || true
          
          # Check if release exists before trying to delete
          if gh release view ${{ needs.prepare-release.outputs.release_tag }} --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Deleting release: ${{ needs.prepare-release.outputs.release_tag }}"
            gh release delete ${{ needs.prepare-release.outputs.release_tag }} -y --repo ${{ github.repository }} || true
            echo "Release deleted successfully"
          else
            echo "Release ${{ needs.prepare-release.outputs.release_tag }} not found, nothing to rollback"
          fi
          
          echo "=== Rollback process completed ==="
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
